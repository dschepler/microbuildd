#!/usr/bin/env python3

import asyncio, logging, os, signal
import states, repo, chroot, shield_util
import micro_buildd_conf as conf

class MicroBuilddController(object):
    statesdb = None
    repo = None
    chroot = None
    lock = None
    immediate_processincoming_event = None

    def __init__(self):
        self.lock = asyncio.Lock()
        self.immediate_processincoming_event = asyncio.Event()
        self.statesdb = states.States(self.lock)
        self.repo = repo.Repo()
        self.chroot = chroot.Chroot()

    async def __aenter__(self):
        await self.statesdb.__aenter__()
        return self

    async def process_incoming_and_update_db_atom(self):
        async with self.lock:
            await self.repo.process_incoming()
            await self.statesdb.update(self.repo)

    async def incoming_loop(self):
        while True:
            await shield_util.shield_and_wait(self.process_incoming_and_update_db_atom())

            self.immediate_processincoming_event.clear()
            try:
                await asyncio.wait_for(self.immediate_processincoming_event.wait(), timeout=conf.incoming_interval)
            except asyncio.TimeoutError:
                pass

    async def build_loop(self):
        first_time = True
        while True:
            async with self.lock:
                async with self.statesdb.get_package_to_build(first_time=first_time, event_to_signal_on_failure=self.immediate_processincoming_event) as build_lease:
                    first_time = False
                    await shield_util.shield_and_wait(self.chroot.build(build_lease, self.statesdb))

    async def chroot_update_loop(self):
        while True:
            await asyncio.sleep(conf.chroot_update_interval)

            async with self.lock:
                await shield_util.shield_and_wait(self.chroot.update())

    def shutdown_handler(self, tasks):
        logging.info('Shutting down')
        tasks.cancel()

    def sigusr1_handler(self):
        logging.info('Scheduling immediate processing of incoming due to user signal')
        self.immediate_processincoming_event.set()

    async def run(self):
        tasks = asyncio.gather(
            self.incoming_loop(),
            self.build_loop(),
            self.chroot_update_loop())
        loop = asyncio.get_running_loop()
        for sig in signal.SIGINT, signal.SIGTERM:
            loop.add_signal_handler(sig, self.shutdown_handler, tasks)
        loop.add_signal_handler(signal.SIGUSR1, self.sigusr1_handler)

        await tasks

    async def __aexit__(self, *exc):
        await self.statesdb.__aexit__(*exc)

async def aiomain():
    os.environ['LC_ALL'] = 'C.UTF-8'
    os.environ['LANG'] = 'C.UTF-8'
    try:
        del os.environ['DEB_BUILD_OPTIONS']
    except KeyError:
        pass
    try:
        del os.environ['DEB_BUILD_PROFILES']
    except KeyError:
        pass

    async with MicroBuilddController() as controller:
        await controller.run()

def main():
    try:
        asyncio.run(aiomain())
    except asyncio.CancelledError:
        pass

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(name)s:%(levelname)s] %(message)s')
    main()
